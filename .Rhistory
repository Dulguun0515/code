n <- n + 1L
}
}
crop_tiles <- function(i, e, r) {
ri <- crop(r, e[[i]])
crs(ri) <- crs(r)
return(ri)
}
tiles <- purrr::map(seq_along(tiles), function(i) crop_tiles(i, tiles, r))
return(tiles)
}
split_raster <- function(r, nx, ny, buffer = c(0,0)) {
ext <- extent(r)
tiles <- vector("list", length = nx * ny)
n <- 1L
for (i in seq_len(nx) - 1L) {
for (j in seq_len(ny) - 1L) {
x0 <- ext@xmin + i * ((ext@xmax - ext@xmin) / nx) - buffer[1] * xres(r)
x1 <- ext@xmin + (i + 1L) * ((ext@xmax - ext@xmin) / nx) + buffer[1] * xres(r) # nolint
y0 <- ext@ymin + j * ((ext@ymax - ext@ymin) / ny) - buffer[2] * yres(r) # nolint
y1 <- ext@ymin + (j + 1L) * ((ext@ymax - ext@ymin) / ny) + buffer[2] * yres(r) # nolint
tiles[[n]] <- extent(x0, x1, y0, y1)
n <- n + 1L
}
}
crop_tiles <- function(i, e, r) {
ri <- crop(r, e[[i]])
crs(ri) <- crs(r)
return(ri)
}
tiles <- purrr::map(seq_along(tiles), function(i) crop_tiles(i, tiles, r))
return(tiles)
}
split_raster <- function(r, nx, ny, buffer = c(0,0)) {
ext <- extent(r)
tiles <- vector("list", length = nx * ny)
n <- 1L
for (i in seq_len(nx) - 1L) {
for (j in seq_len(ny) - 1L) {
x0 <- ext@xmin + i * ((ext@xmax - ext@xmin) / nx) - buffer[1] * xres(r)
x1 <- ext@xmin + (i + 1L) * ((ext@xmax - ext@xmin) / nx) + buffer[1] * xres(r) # nolint
y0 <- ext@ymin + j * ((ext@ymax - ext@ymin) / ny) - buffer[2] * yres(r) # nolint
y1 <- ext@ymin + (j + 1L) * ((ext@ymax - ext@ymin) / ny) + buffer[2] * yres(r) # nolint
tiles[[n]] <- extent(x0, x1, y0, y1)
n <- n + 1L
}
}
crop_tiles <- function(i, e, r) {
ri <- crop(r, e[[i]])
crs(ri) <- crs(r)
return(ri)
}
tiles <- purrr::map(seq_along(tiles), function(i) crop_tiles(i, tiles, r))
return(tiles)
}
split_raster <- function(r, nx, ny, buffer = c(0,0)) {
ext <- extent(r)
tiles <- vector("list", length = nx * ny)
n <- 1L
for (i in seq_len(nx) - 1L) {
for (j in seq_len(ny) - 1L) {
x0 <- ext@xmin + i * ((ext@xmax - ext@xmin) / nx) - buffer[1] * xres(r)
x1 <- ext@xmin + (i + 1L) * ((ext@xmax - ext@xmin) / nx) + buffer[1] * xres(r) # nolint
y0 <- ext@ymin + j * ((ext@ymax - ext@ymin) / ny) - buffer[2] * yres(r) # nolint
y1 <- ext@ymin + (j + 1L) * ((ext@ymax - ext@ymin) / ny) + buffer[2] * yres(r) # nolint
tiles[[n]] <- extent(x0, x1, y0, y1)
n <- n + 1L
}
}
crop_tiles <- function(i, e, r) {
ri <- crop(r, e[[i]])
crs(ri) <- crs(r)
return(ri)
}
tiles <- purrr::map(seq_along(tiles), function(i) crop_tiles(i, tiles, r))
return(tiles)
}
library(tidyr)
library(rgdal)
library(ggplot2)
library(raster)
library(leaflet)
library(rasterVis)
library(gridExtra)
library(RColorBrewer)
library(plotly)
library(purrr)
split_raster <- function(r, nx, ny, buffer = c(0,0)) {
ext <- extent(r)
tiles <- vector("list", length = nx * ny)
n <- 1L
for (i in seq_len(nx) - 1L) {
for (j in seq_len(ny) - 1L) {
x0 <- ext@xmin + i * ((ext@xmax - ext@xmin) / nx) - buffer[1] * xres(r)
x1 <- ext@xmin + (i + 1L) * ((ext@xmax - ext@xmin) / nx) + buffer[1] * xres(r) # nolint
y0 <- ext@ymin + j * ((ext@ymax - ext@ymin) / ny) - buffer[2] * yres(r) # nolint
y1 <- ext@ymin + (j + 1L) * ((ext@ymax - ext@ymin) / ny) + buffer[2] * yres(r) # nolint
tiles[[n]] <- extent(x0, x1, y0, y1)
n <- n + 1L
}
}
crop_tiles <- function(i, e, r) {
ri <- crop(r, e[[i]])
crs(ri) <- crs(r)
return(ri)
}
tiles <- purrr::map(seq_along(tiles), function(i) crop_tiles(i, tiles, r))
return(tiles)
}
setwd("D:/Diplom/sentinel/mosaic_hil_final")
r = raster("mosaic_Clip81.tif")
#test2
split_raster(r, 25, 25)
r
array <-as.array(r)
str(array)
View(array)
?resample
s <-(nrow = 25, ncol = 25)
divide <- resample(r, s, method = "ngb")
s <-(nrow = 25, ncol = 25)
s <- raster(nrow = 25, ncol = 25)
divide <- resample(r, s, method = "ngb")
s <- raster(nrow = 25, ncol = 25)
divide <- resample(r, s, method = "ngb")
divide <- resample(r, s, method = "ngb")
library(tidyr)
library(rgdal)
library(ggplot2)
library(raster)
library(leaflet)
library(rasterVis)
library(gridExtra)
library(RColorBrewer)
library(plotly)
library(purrr)
setwd("D:/Diplom/sentinel/mosaic_hil_final")
r = raster("mosaic_Clip81.tif")
head(values(r))
?raster
??raster
print(r)
install.packages("RColorBrewer")
install.packages("viridisLite")
?Scale_fill_gradient
library(ggplot2)
?Scale_fill_gradient
??Scale_fill_gradient
dir()
dir(Sentinel 2 load.Rproj)
dir("Sentinel 2 load.Rproj")
dir("Sentinel 2 load")
setwd("D:/Diplom/sentinel/mosaic_hil_final")
getwd()
dir()
library(tidyr)
library(rgdal)
library(ggplot2)
library(raster)
library(leaflet)
library(rasterVis)
library(gridExtra)
library(RColorBrewer)
library(plotly)
library(purrr)
)
library(purrr)
r = raster("mosaic_Clip81.tif")
summary(r)
head(values(r))
r = brick("mosaic_Clip81.tif")
summary(r)
head(values(r))
nlayers(r)
class(r)
r
file.size("mosaic_Clip81.tif")
object.size("mosaic_Clip81.tif")
inMemory(r)
getValues(r)
vals<-getValues(r)
head(vals)
plotRGB(r)
plot(r)
plotRGB(r)
library(tidyr)
library(rgdal)
library(ggplot2)
library(raster)
library(leaflet)
library(rasterVis)
library(gridExtra)
library(RColorBrewer)
library(plotly)
library(purrr)
library(sf)
library(sp)
setwd("D:/Diplom/sentinel/mosaic_hil_final")
setwd("D:/Diplom/sentinel/final")
getwd()
dir()
r = brick("mosaic.tif")
plotRGB(r)
r = brick("S2A_MSIL2A_20200427T035541_N0214_R004_T48UWV_20200427T080955.tif")
plotRGB(r)
#setting dir
setwd("D:/Diplom/sentinel/finale")
getwd()
dir()
S2 <- "D:/Diplom/sentinel/finale"
S2 <- list.files(S2, recursive = TRUE, full.names = TRUE, pattern = "B0[2348]_10m.jp2$")
S2
S2 <- lapply(1:length(S2), function (x) {raster(S2[x])})
S2
S2_stack <- stack(S2)
S2_stack <- stack(S2)
#set layout
options(repr.plot.width = 41,repr.plot.width = 20)
m <- rbind(c(1,2))
layout(m)
#stack
S2_stack <- stack(S2)
#setting dir
setwd("D:/Diplom/sentinel/final")
getwd()
dir()
r <- stack("mosaic.tif")
plotRGB(r)
source('~/.active-rstudio-document', echo=TRUE)
#stack
S2_stack <- stack(S2)
plotRGB(S2_stack, r = 4, g = 3, b = 2)
plotRGB(S2_stack, r = 4, g = 3, b = 2, scale =maxValue(S2[[2]]), scretch = hist)
plotRGB(S2_stack, r = 4, g = 3, b = 2, scale =maxValue(S2[[2]]), scretch = 'hist')
warninig()
#setting dir
setwd("D:/Diplom/sentinel/finale")
getwd()
dir()
#loading file
S2 <- "D:/Diplom/sentinel/finale"
S2 <- list.files(S2, recursive = TRUE, full.names = TRUE, pattern = "B0[2348]_10m.jp2$")
S2 <- lapply(1:length(S2), function (x) {raster(S2[x])})
S2
#stack
S2_stack <- stack(S2)
plotRGB(S2_stack, r = 4, g = 3, b = 2, scale =maxValue(S2[[2]]), scretch = 'hist')
plotRGB(S2_stack, r = 4, g = 3, b = 2, scale =maxValue(S2[[2]]), stretch = 'hist')
plotRGB(S2_stack, r = 3, g = 2, b = 1, scale =maxValue(S2[[2]]), stretch = 'hist')
getValues(S2_stack)
S2 <- list.files(S2, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
#loading file
S2 <- "D:/Diplom/sentinel/finale"
S2 <- list.files(S2, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
S2 <- lapply(1:length(S2), function (x) {raster(S2[x])})
S2
#stack
S2_stack <- stack(S2)
plotRGB(S2_stack, r = 3, g = 2, b = 1, scale =maxValue(S2[[2]]), stretch = 'hist')
getValues(S2_stack)
class(S2_stack)
class(S2)
install.packages("sen2r")
library(sen2r)
sen2r()
install.packages(c("leafpm", "mapedit", "shiny", "shinyFiles", "shinydashboard", "shinyjs", "shinyWidgets"))
install.packages(c("leafpm", "mapedit", "shiny", "shinyFiles", "shinydashboard", "shinyjs", "shinyWidgets"))
source('~/.active-rstudio-document', echo=TRUE)
sen2r()
sen2r()
class(S2)
class(S2_stack)
#loading file deed
deed <- "D:/Diplom/sentinel/finale"
deed <- list.files(S2, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
deed <- lapply(1:length(S2), function (x) {raster(S2[x])})
deed
#setting dir
setwd("D:/Diplom/sentinel/finale")
getwd()
dir()
#setting dir
setwd("D:/Diplom/sentinel/finale/deed")
getwd()
dir()
#loading file deed
deed <- "D:/Diplom/sentinel/finale"
#loading file deed
deed <- "D:/Diplom/sentinel/finale/deed"
deed <- list.files(S2, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
deed <- lapply(1:length(S2), function (x) {raster(S2[x])})
deed
getwd()
dir()
#loading file deed
deed <- "D:/Diplom/sentinel/finale/deed"
#loading file deed
deed <- "D:/Diplom/sentinel/finale/deed"
deed <- list.files(S2, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
deed <- lapply(1:length(S2), function (x) {raster(S2[x])})
deed
#loading file deed
deed <- "D:/Diplom/sentinel/finale/deed"
deed <- list.files(S2, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
#setting dir
setwd("D:/Diplom/sentinel/finale/deed")
getwd()
dir()
#loading file deed
deed <- "D:/Diplom/sentinel/finale/deed"
deed <- list.files(S2, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
#loading file deed
deed <- "D:/Diplom/sentinel/finale/deed"
deed <- list.files(deed, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
deed <- lapply(1:length(deed), function (x) {raster(deed[x])})
deed
#stack_deed
deed_stack <- stack(deed)
#stack_deed
deed_stack <- stack(deed)
plotRGB(deed_stack, r = 3, g = 2, b = 1, scale =maxValue(deed[[2]]), stretch = 'hist')
#setting dir
setwd("D:/Diplom/sentinel/finale")
getwd()
dir()
#loading file deed
deed <- "D:/Diplom/sentinel/finale/deed"
deed <- list.files(deed, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
deed <- lapply(1:length(deed), function (x) {raster(deed[x])})
deed
#stack_deed
deed_stack <- stack(deed)
#plotRGB
plotRGB(deed_stack, r = 3, g = 2, b = 1, scale =maxValue(deed[[2]]), stretch = 'hist')
#loading file dood
dood <- "D:/Diplom/sentinel/finale/dood"
dood <- list.files(dood, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
dood <- lapply(1:length(dood), function (x) {raster(dood[x])})
#stack_dood
dood_stack <- stack(dood)
#plotRGB
plotRGB(dood_stack, r = 3, g = 2, b = 1, scale = maxValue(deed[[2]]), stretch = 'hist')
#load zuun
zuun <- "D:/Diplom/sentinel/finale/zuun"
zuun <- list.files(zuun, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
zuun <- lapply(1:length(zuun), function (x) {raster(zuun[x])})
zuun
#stack_dood
zuun_stack <- stack(zuun)
#plotRGB
plotRGB(zuun_stack, r = 3, g = 2, b = 1, scale = maxValue(zuun[[2]]), stretch = 'hist')
#load darhan hil
mosaic <- (deed_stack, dood_stack, zuun_stack)
getwd()
source('~/.active-rstudio-document', echo=TRUE)
#load zuun
zuun <- "D:/Diplom/sentinel/finale/zuun"
zuun <- list.files(zuun, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
zuun <- lapply(1:length(zuun), function (x) {raster(zuun[x])})
#stack_dood
zuun_stack <- stack(zuun)
#loading file dood
dood <- "D:/Diplom/sentinel/finale/dood"
dood <- list.files(dood, recursive = TRUE, full.names = TRUE, pattern = "B0[234]_10m.jp2$")
dood <- lapply(1:length(dood), function (x) {raster(dood[x])})
dood
#stack_dood
dood_stack <- stack(dood)
#mosaic
m2 <- mosaic(deed_stack, zuun_stack, dood_stack)
#mosaic
m2 <- mosaic(deed_stack, zuun_stack, dood_stack, fun = mean())
#mosaic
m2 <- mosaic(deed_stack, zuun_stack, dood_stack, fun = mean)
#plotRGB mosaic
plotRGB(m2)
#class
class(m2)
#class
class(m2, r = 3, g = 2, b = 1, scale = maxValue(m2[[2]], stretch = 'hist'))
#class
class(m2, r = 3, g = 2, b = 1, scale = maxValue(m2[[]], stretch = 'hist'))
#class
class(m2, r = 3, g = 2, b = 1, scale = maxValue(m2, stretch = 'hist'))
#plotRGB mosaic
plotRGB(m2, r = 3, g = 2, b = 1, scale = maxValue(m2[[2]], stretch = 'hist')
#plotRGB mosaic
plotRGB(m2, r = 3, g = 2, b = 1, scale = maxValue(m2[[2]]), stretch = 'hist')
#plotRGB mosaic
plotRGB(m2, r = 3, g = 2, b = 1, scale = maxValue(m2[[2]]), stretch = 'hist')
?plotRGB
#load darhan hil
hil <- st_read("D:/Diplom/sentinel/finale/hil/darhan_hil.shp")
plot(hil)
raster::plot(hil)
raster:plot(hil)
raster::plot(hil)
class(hil)
str(hil, max.level = 2)
#tasalsan raster
raster_crop <- (m2, hil)
#tasalsan raster
raster_crop <- crop(m2, hil)
plot(raster_crop)
plot(raster_crop, r = 3, g = 2, b = 1, scale = maxValue(raster_crop[[2]]), stretch = 'hist')
plotRGB(raster_crop, r = 3, g = 2, b = 1, scale = maxValue(raster_crop[[2]]), stretch = 'hist')
#mask raster
raster_mask <- mask(raster_crop, mask = hil)
#plot mask
plotRGB(raster_mask, r = 3, g = 2, b = 1, scale = maxValue(raster_mask[[2]]), stretch = 'hist')
getValues(raster_mask)
count(getValues(raster_mask) == NA)
getValues(raster_mask) == Na
getValues(raster_mask) == NA
#minvalue mask raster
minValue(raster_mask)
hist(raster_mask,
maxpixels = ncell(raster_mask)
maxpixels = ncell(raster_mask)
#hist
hist(raster_mask, maxpixels = ncell(raster_mask)
#hist
hist(raster_mask, maxpixels = ncell(raster_mask))
#hist
hist(raster_mask, maxpixels = ncell(raster_mask))
#plot mask
plot(plot_mask,
col = gray(0:100 / 100))
#plot mask
plot(raster_mask,
col = gray(0:100 / 100))
summary(raster_mask)
writeRaster(raster_mask, filename = "raster_mask.tif", format = "tif")
writeRaster(raster_mask, filename = "raster_mask.tif", format = "tiff")
writeRaster(raster_mask, filename = "raster_mask.tif", format = "GTiff")
brick(raster_mask.tif)
brick("raster_mask.tif")
saved<-brick("raster_mask.tif")
plotRGB(raster_)
plotRGB(saved)
plotRGB(saved,r = 3, g = 2, b = 1, scale = maxValue(raster_mask[[2]]), stretch = 'hist')
plotRGB(saved,r = 3, g = 2, b = 1, stretch = 'hist')
source('~/.active-rstudio-document', echo=TRUE)
getwd()
library(tidyr)
library(rgdal)
library(ggplot2)
library(raster)
library(leaflet)
library(rasterVis)
library(gridExtra)
library(RColorBrewer)
library(plotly)
library(purrr)
library(sf)
library(sp)
#setting dir
setwd("D:/Diplom/sentinel/finale")
#setting dir
setwd("D:/Diplom/sentinel/finale")
raster<-brick("raster_mask,tif")
raster<-brick("D:/Diplom/sentinel/finale/raster_mask,tif")
raster<-raster("D:/Diplom/sentinel/finale/raster_mask,tif")
raster<-brick("D:/Diplom/sentinel/finale/raster_mask,tif")
raster<-brick("D:/Diplom/sentinel/finale/raster_mask.tif")
plotRGB(raster,r = 3, g = 2, b = 1, stretch = 'hist')
summary(raster)
raster
raster<-brick("D:/Diplom/sentinel/finale/raster_mask.tif")
library(tidyr)
library(rgdal)
library(ggplot2)
library(raster)
library(leaflet)
library(rasterVis)
library(gridExtra)
library(RColorBrewer)
library(plotly)
library(purrr)
library(sf)
library(sp)
#setting dir
#setting dir
setwd("D:/Diplom/sentinel/finale")
getwd()
raster<-brick("D:/Diplom/sentinel/finale/raster_mask.tif")
plotRGB(raster,r = 3, g = 2, b = 1, stretch = 'hist')
summary(raster)
summary(raster)
raster
library(tidyr)
library(rgdal)
library(ggplot2)
library(raster)
library(leaflet)
library(rasterVis)
library(gridExtra)
library(RColorBrewer)
library(plotly)
library(purrr)
library(sf)
library(sp)
#setting dir
setwd("D:/Diplom/sentinel/finale")
getwd()
raster<-brick("D:/Diplom/sentinel/finale/raster_mask.tif")
plotRGB(raster,r = 3, g = 2, b = 1, stretch = 'hist')
r <- raster(nrow = 256, ncol =256)
s <- resample(raster, r, method = 'ngb')
s <- resample(raster, r, method = "ngb")
summary(raster)
raster
